#!/usr/bin/env python
"""
sshuttle allows you to maintain a familiar environment with you when you connect to new hosts.
It does this by injecting a customizable bashrc during your ssh session setup.
"""

import argparse
import glob
import os
import subprocess
import sys
import urllib

SSHUTTLE_EOL = "_EOL"

def cook_rcfile(data):
    """
    Join elements of passed list and return a URI encoded string

    Args:
      data (list): list of lines

    Returns:
      data (str): URI encoded string
    """
    data = SSHUTTLE_EOL.join(data)
    return urllib.quote(data)

def get_parser():
    """
    Generate a argparse.ArgumentParser object

    Args:
        None

    Returns:
        argparse.ArgumentParser
    """
    parser = argparse.ArgumentParser(
                usage="%(prog)s [ssh-opts] <host>",
                description="%(prog)s takes advantage of bash to give you a familiar home on remote systems",
             )
    parser.add_argument('-d', '--decoder',
            action='store',
            dest='decoder',
            type=str,
            choices=["perl", "python"]
           )
    return parser

def default_rcfile():
    """
    Return a simple default rcfile

    Args:
      none

    Returns:
      data (list): default rc file contents
    """
    default = """rm $TMPDIR/.rc;
rmdir $TMPDIR;
PS1="\\[\\e[00;31m\\]\\u\\[\\e[0m\\]\\[\\e[00;37m\\]@\\[\\e[0m\\]\\[\\e[00;36m\\]\\h\\[\\e[0m\\]\\[\\e[00;37m\\]:\\w \\[\\e[0m\\]"
"""
    return [ line.rstrip() for line in default.split('\n') ]

def read_rcfile(rcfile):
    """
    Read the file specified by the passed filename and return a list of lines with newlines stripped

    Args:
      rcfile (str): a path to the rc file to read

    Returns:
      data (list): list of lines with newlines stripped
    """
    script = ["# following sourced from {}".format(rcfile)]
    with open(rcfile) as f:
        script += f.readlines()
    return [ line.rstrip() for line in script ]

def get_user_rcfiles():
    """
    Search default paths for rcfiles, read them, and return a list of lines

    Args:
        None

    Returns:
        script (list): aggregated list of lines from all scripts
    """
    search_files = []
    search_files.append(os.path.join(os.environ['HOME'], '.sshuttlerc'))
    search_files.append(os.path.join(os.environ['HOME'], '.sshuttlerc.d'))

    script = []
    for rcfile in search_files:
        if os.path.isfile(rcfile):
            script += read_rcfile(rcfile)
        if os.path.isdir(rcfile):
            for rcdfile in os.listdir(rcfile):
                script += read_rcfile(os.path.join(rcfile, rcdfile))
    return script

def get_inject_string_python(command_script):
    """
    Return a python one-liner to decode a URI encoded string

    Args:
        None

    Returns:
        script (string)
    """
    return "INJECT=\"mkdir {tmpdir}; echo \\$(python -c 'import urllib; import sys; print urllib.unquote(str(sys.argv[1]))' '{cmd}') | sed 's/{eol}/\\n/g' >{tmpdir}/.rc\"".format(
        tmpdir="/tmp/sshuttle.{}".format(os.getpid()),
        cmd=command_script,
        eol=SSHUTTLE_EOL)

def get_inject_string_perl(command_script):
    """
    Return a perl one-liner to decode a URI encoded string

    Args:
        None

    Returns:
        script (string)
    """
    raise Exception("perl mode not yet implemented")
    #return "INJECT=\"mkdir {tmpdir}; echo \\$(perl -MURI::Escape -e 'print uri_unescape(\\\$ARGV[0]);' '{cmd}') | sed 's/{eol}/\\n/g' >{tmpdir}/.rc\"".format(
    #    tmpdir="/tmp/sshuttle.{}".format(os.getpid()),
    #    cmd=command_script,
    #    eol=SSHUTTLE_EOL)

def get_inject_string_awk(command_script):
    """
    Return an awk one-liner to decode a URI encoded string

    Args:
        None

    Returns:
        script (string)
    """
    raise Exception("awk mode not yet implemented")
    #return "INJECT=\"mkdir {tmpdir}; echo \\$(echo '{cmd}' | awk -niord '{{printf RT?$0chr(\"0x\"substr(RT,2)):$0}}' RS=%..) | sed 's/{eol}/\\n/g' >{tmpdir}/.rc\"".format(
    #    tmpdir="/tmp/sshuttle.{}".format(os.getpid()),
    #    cmd=command_script,
    #    eol=SSHUTTLE_EOL)

def get_inject_string_bash(command_script):
    """
    Return a bash one-liner to decode a URI encoded string

    Args:
        None

    Returns:
        script (string)
    """
    raise Exception("bash mode not yet implemented")
    #return "INJECT=\"mkdir {tmpdir}; echo \\$(x='{cmd}'; printf \\\"${{x//\\%/\\x}}\\\" --) |sed 's/{eol}/\\n/g' >{tmpdir}/.rc\"".format(
    #    tmpdir="/tmp/sshuttle.{}".format(os.getpid()),
    #    cmd=command_script,
    #    eol=SSHUTTLE_EOL)

def connect(target_host, ssh_options, command_script):
    """
    Connect to the host and inject our commands

    Args:
        None

    Returns:
        None
    """

    if args[0].decoder and 'perl' in args[0].decoder:
        inject_string = get_inject_string_perl(command_script)
    elif args[0].decoder and 'awk' in args[0].decoder:
        inject_string = get_inject_string_awk(command_script)
    elif args[0].decoder and 'bash' in args[0].decoder:
        inject_string = get_inject_string_bash(command_script)
    else:
        inject_string = get_inject_string_python(command_script)

    cmd_line = ''
    cmd_line += inject_string
    cmd_line += "; /usr/bin/ssh -t"
    for o in ssh_options:
        cmd_line += " {}".format(o)

    cmd_line += " {} ".format(target_host)
    cmd_line += "\"$INJECT; TMPDIR={tmpdir} exec /bin/bash --rcfile {tmpdir}/.rc\"".format(tmpdir="/tmp/sshuttle.{}".format(os.getpid()))
    os.system(cmd_line)

def main(args):
    """
    Build the injection string and connect to the host
    """
    target_host = args[1].pop()
    if len(args[1]) > 0:
        ssh_options = args[1]
    else:
        ssh_options = ""

    rcfile = default_rcfile()
    rcfile += get_user_rcfiles()
    inject_string = cook_rcfile(rcfile)

    connect(target_host, ssh_options, inject_string)

if __name__ == "__main__":
    parser = get_parser()
    args = parser.parse_known_args()

    if not len(args[1]) > 0:
        parser.print_help()
        sys.exit(1)

    sys.exit(main(args))
